COBOL  is one of the oldest programming languages, primarily designed by Grace Hopper. Its name is an acronym for COmmon Business-Oriented Language, defining its primary domain in business, finance, and administrative systems for companies and governments.

The COBOL 2002 standard includes support for object-oriented programming and other modern language features.

==History and specification==
The COBOL specification was created by a committee of researchers  from private industry, universities, and government during the second half of 1959. The specifications were to a great extent inspired by the FLOW-MATIC language invented by Grace Hopper, commonly referred to as "the mother of the COBOL language." The IBM COMTRAN language invented by Bob Bemer was also drawn upon, but the FACT language specification from Honeywell was not distributed to committee members until late in the process and had relatively little impact. FLOW-MATIC's status as the only language of the bunch to have actually been implemented made it particularly attractive to the committee.

The scene was set on April 8, 1959 at a Conference on Data Systems Languages (CODASYL) for computer manufacturers, users, and university people, at the University of Pennsylvania Computing Center. The United States Department of Defense subsequently agreed to sponsor and oversee the next activities. A meeting chaired by Charles A. Phillips was held at the Pentagon on May 28 and 29 of 1959 (exactly one year after the ZÃ¼rich ALGOL 58 meeting); there it was decided to set up three committees: short, intermediate and long range (the last one was never actually formed). It was the Short Range Committee, chaired by Joseph Wegstein of the US National Bureau of Standards, that during the following months created a description of the first version of COBOL. The committee was formed to recommend a short range approach to a common business language. The committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were Burroughs Corporation, IBM, Minneapolis-Honeywell (Honeywell Labs), RCA, Sperry Rand, and Sylvania Electric Products. The three government agencies were the US Air Force, the Navy's David Taylor Model Basin, and the National Bureau of Standards (now National Institute of Standards and Technology). The intermediate-range committee was formed but never became operational. In the end a sub-committee of the Short Range Committee developed the specifications of the COBOL language. This sub-committee was made up of six individuals:

* William Selden and Gertrude Tierney of IBM
* Howard Bromberg and Howard Discount of RCA
* Vernon Reeves and Jean E. Sammet of Sylvania Electric Products

The decision to use the name "COBOL" was made at a meeting of the committee held on 18 September 1959. The subcommittee completed the specifications for COBOL in December 1959.

The first compilers for COBOL were subsequently implemented in 1960, and on December 6 and 7, essentially the same COBOL program ran on two different computer makes, an RCA computer and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.

=== ANS COBOL 1968 ===
After 1959 COBOL underwent several modifications and improvements. In an attempt to overcome the problem of incompatibility between different versions of COBOL, the American National Standards Institute (ANSI) developed a standard form of the language in 1968 after the version COBOL-61 release which has become the cornerstone for further versions. This version was known as American National Standard (ANS) COBOL.

=== COBOL 1974 ===
In 1974, ANSI published a revised version of (ANS) COBOL, containing a number of features that were not in the 1968 version.

=== COBOL 1985 ===
In 1985, ANSI published still another revised version that had new features not in the 1974 standard, most notably structured language constructs ("scope terminators"), including END-IF, END-PERFORM, END-READ, etc.

===COBOL 2002 and object-oriented COBOL===
The language continues to evolve today.  In the early 1990s it was decided to add object-orientation in the next full revision of COBOL.  The initial estimate was to have this revision completed by 1997 and an ISO CD (Committee Draft) was available by 1997.  Some vendors (including Micro Focus, Fujitsu, Veryant, and IBM) introduced object-oriented syntax based on the 1997 or other drafts of the full revision.  The final approved ISO standard (adopted as an ANSI standard by INCITS) was approved and made available in 2002.

Like the C++ and Java programming languages, object-oriented COBOL compilers are available even as the language moves toward standardization. Fujitsu, Micro Focus and Raincode currently support object-oriented COBOL compilers targeting the .NET framework.

COBOL 2002 included many other features beyond object-orientation. These included (but are not limited to):

* National language support (including but not limited to Unicode support)
* Locale-based processing
* User-defined functions
* CALL (and function) prototypes (for compile-time parameter checking)
* Pointers and syntax for getting and freeing storage
* Calling conventions to and from non-COBOL languages such as C
* Support for execution within framework environments such as Microsoft's .NET and Java (including COBOL instantiated as Enterprise JavaBeans)
* Bit and Boolean support
* "True" binary support (up until this enhancement, binary items were truncated based on the (base-10) specification within the Data Division)
* Floating-point support
* Standard (or portable) arithmetic results
* XML generation and parsing

===History of COBOL standards===
The specifications approved by the full Short Range Committee were approved by the Executive Committee on January 3, 1960, and sent to the government printing office, which edited and printed these specifications as COBOL 60.

The American National Standards Institute (ANSI) produced several revisions of the COBOL standard, including:

* COBOL-68
* COBOL-74
* COBOL-85
* Intrinsic Functions Amendment - 1989
* Corrections Amendment - 1991

After the Amendments to the 1985 ANSI Standard (which were adopted by ISO), primary development and ownership was taken over by ISO.  The following editions and TRs (Technical Reports) have been issued by ISO (and adopted as ANSI) Standards:

* COBOL 2002
* Finalizer Technical Report - 2003
* Native XML syntax Technical Report - 2006
* Object Oriented Collection Class Libraries - pending final approval...

From 2002, the ISO standard is also available to the public coded as ISO/IEC 1989.

Work progresses on the next full revision of the COBOL Standard. Approval and availability was expected early 2010s.  For information on this revision, to see the latest draft of this revision, or to see what other works is happening with the COBOL Standard, see the COBOL Standards Website.

===Legacy===
COBOL programs are in use globally in governmental and military agencies and in commercial enterprises, and are running on operating systems such as IBM's z/OS and z/VSE, the POSIX families (Unix/Linux etc.), and Microsoft's Windows as well as ICL's VME operating system and Unisys' OS 2200.  In 1997, the Gartner Group reported that 80% of the world's business ran on COBOL with over 200 billion lines of code in existence and with an estimated 5 billion lines of new code annually.

Near the end of the twentieth century the year 2000 problem was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before.  The particular level of effort required for COBOL code has been attributed both to the large amount of business-oriented COBOL, as COBOL is by design a business language and business applications use dates heavily, and to constructs of the COBOL language such as the PICTURE clause, which can be used to define fixed-length numeric fields, including two-digit fields for years. Because of the clean-up effort put into these COBOL programs for Y2K, many of them have been kept in use for years since then.

===Competitors===
As COBOL was developed during the Cold War, it was part of the arms race between the United States and the Soviet Union. The high level language that the Soviets used in their ballistic missiles was Address programming language.

==Features==

COBOL as defined in the original specification included a PICTURE clause for detailed field specification.  It did not support local variables, recursion, dynamic memory allocation, or structured programming constructs.  Support for some or all of these features has been added in later editions of the COBOL standard. COBOL has many reserved words (over 400), called keywords.

===Self-modifying code===
The original COBOL specification supported the infamous "ALTER X TO PROCEED TO Y" statement, for which many compilers generated self-modifying code. X and Y are paragraph labels, and any "GOTO X" statements executed after such an ALTER statement have the meaning "GOTO Y" instead. Most compilers still support it, but it should not be used in new programs as it was deprecated in COBOL 1985.

===Syntactic features===
COBOL provides an update-in-place syntax, for example

ADD YEARS TO AGE

The equivalent construct in many procedural languages would be

age = age + years

This syntax is similar to the compound assignment operator later adopted by C:

age += years

The abbreviated conditional expression

IF SALARY > 9000 OR SUPERVISOR-SALARY OR = PREV-SALARY

is equivalent to

IF SALARY > 9000
          OR SALARY > SUPERVISOR-SALARY
          OR SALARY = PREV-SALARY

COBOL provides "named conditions" (so-called 88-levels). These are declared as sub-items of another item (the conditional variable). The named condition can be used in an IF statement, and tests whether the conditional variable is equal to any of the values given in the named condition's VALUE clause. The SET statement can be used to make a named condition TRUE (by assigning the first of its values to the conditional variable).

COBOL allows identifiers up to 30 characters long. When COBOL was introduced, much shorter lengths (e.g., 6 characters for FORTRAN) were prevalent.

COBOL introduced the concept of copybooksâ chunks of code that can be inserted into a larger program. COBOL does this with the COPY statement, which also allows other code to replace parts of the copybook's code with other code (using the REPLACING ... BY ... clause).

===Data types===
Standard COBOL provides the following data types:

Most vendors provide additional types, such as:

===Hello, world===
An example of the "Hello, world" program in COBOL:

IDENTIFICATION DIVISION.
      PROGRAM-ID. HELLO-WORLD.
      PROCEDURE DIVISION.
          DISPLAY 'Hello, world'.
          STOP RUN.

There are various dialects of COBOL. Some compilers, for example, allow the use of double quotes in addition to standard single quotes:

DISPLAY "Hello, world".

====Hello, OS/360 circa 1972====
On an IBM System/360 running OS/360 MVT 21.8f, circa 1972 (which predates the tradition of using Hello, world for introductory examples), Hello, world would have been punched onto 80-column cards, containing source code similar to:

//COBUCLG  JOB CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)
//HELOWRLD EXEC COBUCLG,PARM.COB='MAP,LIST,LET'
//COB.SYSIN DD *
  001  IDENTIFICATION DIVISION.
  002  PROGRAM-ID.  'HELLO'.
  003  ENVIRONMENT DIVISION.
  004  CONFIGURATION SECTION.
  005  SOURCE-COMPUTER.  IBM-360.
  006  OBJECT-COMPUTER.  IBM-360.
  0065 SPECIAL-NAMES.
  0066     CONSOLE IS CNSL.
  007  DATA DIVISION.
  008  WORKING-STORAGE SECTION.
  009  77  HELLO-CONST   PIC X(12) VALUE 'HELLO, WORLD'.
  075  PROCEDURE DIVISION.
  090  000-DISPLAY.
  100      DISPLAY HELLO-CONST UPON CNSL.
  110      STOP RUN.
//LKED.SYSLIB DD DSNAME=SYS1.COBLIB,DISP=SHR
//            DD DSNAME=SYS1.LINKLIB,DISP=SHR
//GO.SYSPRINT DD SYSOUT=A
//

The "//" source lines are JCL statements, surrounding the COBOL sequence-numbered source code. The ANS COBOL Compile, Link, and Go module "COBUCLG" was typically utilized to compile and execute the code.  The resulting "HELLO, WORLD" output would have then been displayed on the operator's console.

==Criticism and defense==

===Lack of structurability===
In his letter to an editor in 1975 entitled "How do we tell truths that might hurt?" which was critical of several programming languages contemporaneous with COBOL, computer scientist and Turing Award recipient Edsger Dijkstra remarked that "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense."

In his dissenting response to Dijkstra's article and the above "offensive statement," computer scientist Howard E. Tompkins defended structured COBOL: "COBOL programs with convoluted control flow indeed tend to 'cripple the mind'," but this was because "There are too many such business application programs written by programmers that have never had the benefit of structured COBOL taught well..."

Additionally, the introduction of OO-COBOL has added support for object-oriented code as well as user-defined functions and user-defined data types to COBOL's repertoire.

===Compatibility issues after standardization===
COBOL 85 was not fully compatible with earlier versions, resulting in the "caesarean birth" of COBOL 85.  Joseph T. Brophy, CIO, Travelers Insurance, spearheaded an effort to inform users of COBOL of the heavy reprogramming costs of implementing the new standard.  As a result the ANSI COBOL Committee received more than 3,200 letters from the public, mostly negative, requiring the committee to make changes.  On the other hand, conversion to COBOL 85 was thought to increase productivity in future years, thus justifying the conversion costs.

===Verbose syntax===
COBOL syntax has often been criticized for its verbosity. However, proponents note that this was intentional in the language design, and many consider it one of COBOL's strengths. One of the design goals of COBOL was that non-programmersâmanagers, supervisors, and usersâcould read and understand the code. This is why COBOL has an English-like syntax and structural elementsâincluding: nouns, verbs, clauses, sentences, sections, and divisions. Consequently, COBOL is considered by at least one source to be "The most readable, understandable and self-documenting programming language in use today. [...] Not only does this readability generally assist the maintenance process but the older a program gets the more valuable this readability becomes."  On the other hand, the mere ability to read and understand a few lines of COBOL code does not grant to an executive or end user the experience and knowledge needed to design, build, and maintain large software systems.

===Other defenses===

Additionally, traditional COBOL is a simple language with a limited scope of function (with no pointers, no user-defined types, and no user-defined functions), encouraging a straightforward coding style. This has made it well-suited to its primary domain of business computingâwhere the program complexity lies in the business rules that need to be encoded rather than sophisticated algorithms or data structures. And because the standard does not belong to any particular vendor, programs written in COBOL are highly portable. The language can be used on a wide variety of hardware platforms and operating systems. And the rigid hierarchical structure restricts the definition of external references to the Environment Division, which simplifies platform changes in particular.

==See also==
* Programming language genealogies
* Alphabetical list of programming languages
* Comparison of programming languages
* OpenCOBOL
* CODASYL

==References==

==Sources==
* Ebbinkhuijsen, Wim B.C., COBOL Alphen aan den Rijn/Diegem: Samson Bedrijfsinformatie bv, 1990. ISBN 90-14-04560-3. (Dutch)

==External links==

Reference manuals:
* IBM Enterprise COBOL for z/OS V4R2 Bookshelf
* IBM COBOL for AIX, V4.1.1 documentation
* IBM VS COBOL II V1R4.0 Bookshelf
* IBM COBOL documentation (iSeries Information Center)
* 
* 
* 
*

Compilers and other products:
* IBM COBOL compilers
* IBM COBOL Cafe
* Dell Enterprise Cobol
* Elastic COBOL Cloud-based Elastic COBOL from Heirloom Computing allows application development and maintenance framework as well as deployment of applications onto an Enterprise Legacy Platform-as-a-Service.
* Fujitsu Fujitsu NetCOBOL, COBOL development, deployment and modernization.
* Micro Focus Micro Focus Visual COBOL, COBOL development, deployment and modernization.
* Veryant, affordable COBOL maintenance and modernization platform
* COBOL-IT, The Enterprise-Class Open Source COBOL Compiler
* Cobos, Open Source IDE for COBOL / Mainframe development
* Redvers Consulting, Open Source COBOL Tools
* OpenCOBOL, an open-source COBOL compiler.
* OpenCOBOL FAQ, and collection of code samples.
* TinyCOBOL, an open-source COBOL compiler based on the COBOL 85 standards
* SoftwareMining, COBOL Rule Extraction Toolkit.
* The Compilerator, Online COBOL compiler for small experiments
* RainCode COBOL, .NET Legacy compiler

Exhibitions:
* [http://americanhistory.si.edu/exhibitions/artifact-walls-cobol] An online exhibition from the National Museum of American History, Smithsonian Institution
* What is COBOL Small Definition of COBOL