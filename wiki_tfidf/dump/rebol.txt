REBOL ( ; Relative Expression Based Object Language) is a cross-platform data exchange language and a multi-paradigm dynamic programming language designed by Carl Sassenrath for network communications and distributed computing. The language and its official implementation are developed by REBOL Technologies. REBOL Technologies also claims the name REBOL as a trademark.

Douglas Crockford of JavaScript fame has described REBOL as "a more modern language, but with some very similar ideas to Lisp, in that it's all built upon a representation of data which is then executable as programs" and as one of JSON's influences.

REBOL introduces the concept of dialecting: small, optimized, domain-specific languages for code and data, which is also the most notable property of the language according to its designer:

REBOL has been used to program Internet applications (both client- and server-side), database applications, utilities, and multimedia applications.

==History==
First released in 1997, REBOL was designed over a 20 year period by Carl Sassenrath, the architect and primary developer of AmigaOS, based on his study of denotational semantics and using concepts from the programming languages Lisp, Forth, Logo, and Self.

REBOL Technologies was founded in 1998.

REBOL 2, the interpreter, which became the core of extended interpreter editions, was first released in 1999.

REBOL/Command, which added strong encryption and ODBC access, was released in September 2000.

REBOL/View was released in April 2001, adding graphical abilities on the core language.

REBOL/IOS, an extensible collaboration environment built with REBOL was released in August 2001.

REBOL/SDK, providing a choice of kernels to bind against, as well as a preprocessor, was released in December 2002.

REBOL 3, the newest version of the REBOL interpreter, is currently in development. Alpha versions have been released publicly since January 2008. Following the discussion with Lawrence Rosen, REBOL 3 interpreter has been released under Apache 2.0 license on 12/12/2012. The sources can be downloaded at https://github.com/rebol/rebol

==Ease of use==
One of the REBOL design principles is "to do simple things in simple ways". In the following example the Visual interface dialect is used to describe a simple Hello world program with a graphical user interface:

view layout [text "Hello world!" button "Quit" [quit]]

==Dialects==
REBOL dialects, now popular as domain-specific languages (DSLs), are micro-languages optimized for a specific purpose. Dialects can be used to define business rules, graphical user interfaces or sequences of screens during the installation of a program. Users can define their own dialects, reusing any existing REBOL word and giving it a specific meaning in that dialect. Dialects are interpreted by functions processing REBOL blocks (or parsing strings) in a specific way.

An example of REBOL's dialecting abilities can be seen with the word return. In the data exchange dialect return is just a word not having any specific meaning. In the do dialect, return is a global variable referring to a native function passing back a function result value. In the visual interface dialect (VID), return is a keyword causing the layout engine to simulate a carriage return, moving the "rendering pen" down to the beginning of the next line.

A REBOL interpreter with graphical abilities must understand and interpret many dialects. The table below lists the most important ones in order of significance.

==Syntax==
REBOL syntax is free-form, not requiring specific positioning. However, indentation is recommended to better convey the structure of the text to human readers.

Syntactic properties of different dialects may differ. The common platform for all REBOL dialects is the data exchange dialect; other dialects are usually derived from it. In addition to being the common platform for all dialects, the data exchange dialect is directly used to represent data and metadata, populate data structures, send data over Internet, and save them in data storage.

In contrast to programming languages like C, the data exchange dialect does not consist of declarations, statements, expressions or keywords. A valid data exchange dialect text stream is a tree data structure consisting of blocks (the root block is implicit, subblocks are delimited by square brackets), parens (delimited by round brackets), strings (delimited by double quotes or curly brackets suitable for multi-line strings; caret notation is used for unprintable characters), URLs, e-mail addresses, files, paths or other composite values. Unlike ALGOL blocks, REBOL blocks are composite values similar to quoted s-expressions in Lisp. The fact that code is written in the form of Rebol blocks makes the language homoiconic.

Blocks as well as parens may contain other composite values (a block may contain subblocks, parens, strings, ...) or scalar values like words, set-words (words suffixed by the colon), get-words (words prefixed by the colon), lit-words (words prefixed by the apostrophe), numbers, money, characters, etc., separated by whitespace. Note that special characters are allowed in words, so a+b is a word unlike a + b, which is a sequence of three words separated by spaces.

Comments may appear following the semicolon until the end of the line. Multi-line comments or comments not ignored by the lexical parser can be written using "ordinary" datatypes like multi-line strings.

==Semantics==
Blocks containing domain-specific language can be submitted as arguments to specific evaluator functions.

===do===
The most frequently used evaluator is the do function. It is used by default to interpret the text input to the interpreter console.

The do dialect interpreted by the do function, is an expression-oriented sublanguage of the data exchange dialect. The main semantic unit of the language is the expression. In contrast to imperative programming languages descending from ALGOL, the do dialect has neither keywords, nor statements.

Words are used as case-insensitive variables. Like in all dynamically typed languages, variables don't have an associated type, type is associated with values. The result, i.e. the evaluation of a word is returned, when a word is encountered by the do function. The set-word form of a word can be used for assignment. While not having statements, assignment, together with functions with side-effects can be used for imperative programming.

Subblocks of the root block evaluate to themselves. This property is used to handle data blocks, for structured programming by submitting blocks as arguments to control functions like if, either, loop, etc., and for dialecting, when a block is passed to a specific interpreter function.

A specific problem worth noting is that composite values, assigned to variables, are not copied. To make a copy, the value must be passed to the copy function.

The do function normally follows a prefix style of evaluation, where a function processes the arguments that follow it. However, infix evaluation using infix operators exists too. Infix evaluation takes precedence over the prefix evaluation. For example,
 abs -2 + 3
returns 1, since the infix addition takes precedence over the computation of the absolute value. When evaluating infix expressions, the order of evaluation is left to right, no operator takes precedence over another. For example,
 2 + 3 * 4
returns 20, while an evaluation giving precedence to multiplication would yield 14. All operators have prefix versions. Do usually evaluates arguments before passing them to a function. So, the below expression:
 print read http://en.wikipedia.org/wiki/REBOL
first reads http://en.wikipedia.org/wiki/REBOL and then passes the result to the print function. Parentheses can be used to change the order of evaluation. Using prefix notation, the usage of parentheses in expressions can be avoided.

The simple precedence rules are both an advantage:
* No need to "consult" precedence tables when writing expressions
* No need to rewrite precedence tables when a new operator is defined
* Expressions can be easily transliterated from infix to prefix notation and vice versa
as well as a disadvantage:
* Users accustomed to more conventional precedence rules may easily make a mistake

===parse===
The parse function is preferably used to specify, validate, transform and interpret dialects. It does so by matching parse expressions at run time.

Parse expressions are written in the parse dialect, which, like the do dialect, is an expression-oriented sublanguage of the data exchange dialect. Unlike the do dialect, the parse dialect uses keywords representing operators and the most important nonterminals, infix parsing operators don't have prefix equivalents and use precedence rules (sequence has higher precedence than choice).

Actions can be included to be taken during the parsing process as well and the parse function can be used to process blocks or strings. At the string parsing level parse must handle the "low level" parsing, taking into account characters and delimiters. Block parsing is higher level, handling the scanning at the level of REBOL values.

The parse dialect belongs to the family of grammars represented by the top-down parsing language or the parsing expression grammar. The main similarity is the presence of the sequence and choice operators all the family members have. Parse dialect syntax and the similarities between the parse dialect and the PEG are illustrated by this transliteration of a PEG example that parses an arithmetic expression:
Digit: charset - #"9"
Value: Digit | "(" Expr ")"
Product: [Value any ["/" Value]]
Sum: [Product any ["-" Product]]
Expr: Sum
parse/all "12+13" Expr

==Implementations==
The official REBOL 2.7.8 implementation is available in several editions (/Core, /View, /Command, /SDK and /IOS). Both /Core and /View editions are freely redistributable software.

The runtime environment is stored in a single executable file. REBOL/Core 2.7.8, the console edition, is about 300 KB and REBOL/View 2.7.8, the graphical user interface edition, is about 650 KB in size.

REBOL/View provides platform-independent graphics and sound access, and comes with its own windowing toolkit and extensible set of styles (GUI widgets). Extended editions, such as REBOL/Command 2.7.8 or REBOL/SDK 2.7.8 require a paid license; they add features like ODBC data access, and the option to create standalone executable files.

REBOL 2.101.0 has been released under the Apache 2.0 license.

There are also independent alternatives to the REBOL interpreter (or parts of it), which are written as implementations of REBOL dialects.
* Orca is "an interpreter for a REBOL-like language". Orca is written in C, but cannot be compiled without a REBOL interpreter being installed (Orca can be used when available).
* Boron is a C library which may be copied under the terms of the LGPLv3. It is an interpreter of a REBOL dialect. The Boron dialect is an interpreted, homoiconic language, which is meant for embedding domain specific languages.
* The Red/System compiler implements a REBOL dialect. It is currently bootstrapped using a REBOL interpreter and therefore needs a REBOL interpreter to run.
* The RebGUI dialect is an open alternative to REBOL/View's VID dialect for graphical user interfaces.

==See also==

* Dialecting
* Domain-specific language
* Language-oriented programming

* Parsing expression grammar
* Pattern matching
* Polish notation

==References==

==Further reading==
* 
*

== External links ==

* 
* 
* 
* 
*  Forum

* A REBOL tutorial
* REBOL one-line programs
* REBOL programs cookbook
*  Forum
* REBOL mailing list