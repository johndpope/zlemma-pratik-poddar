An integer programming problem is a mathematical optimization or feasibility program in which some or all of the variables are restricted to be integers. In many settings the term refers to integer linear programming (ILP), in which the objective function and the constraints (other than the integer constraints) are linear.

Integer programming is NP-hard. A special case, 0-1 integer linear programming, in which unknowns are binary, is one of Karp's 21 NP-complete problems.

==Canonical and standard form for ILPs==

An integer linear program in canonical form is expressed as:

: \begin{align}
& \text{maximize}   && \mathbf{c}^\mathrm{T} \mathbf{x}\\
& \text{subject to} && A \mathbf{x} \le \mathbf{b}, \\
&  && \mathbf{x} \ge \mathbf{0}, \\
& \text{and} && \mathbf{x} \in \mathbb{Z},
\end{align} ,

and an ILP in standard form is expressed as

: \begin{align}
& \text{maximize}   && \mathbf{c}^\mathrm{T} \mathbf{x}\\
& \text{subject to} && A \mathbf{x} = \mathbf{b}, \\
&  && \mathbf{x} \ge \mathbf{0}, \\
& \text{and} && \mathbf{x} \in \mathbb{Z},
\end{align} 
where the entries of \mathbf{c}, \mathbf{b} are vectors and A is a matrix, having integer values.  Note that similar to linear programs, ILPs not in standard form can be converted to standard form by eliminating inequalities by introducing slack variables and replacing variables that are not sign-constrained with the difference of two sign-constrained variables

==Example==

The graph on the right shows the following problem.
:
     \begin{align}
      \max  & \text{ } y \\
            -x +y & \leq 1  \\
            3x +2y & \leq 12 \\
            2x +3y & \leq 12 \\
            x,y & \ge 0 \\
            x,y & \in \mathbb{Z}
     \end{align}

The feasible integer points are shown in red, and the red dashed lines indicate their convex hull, which is the smallest polyhedron that contains all of these points.  The blue lines together with the coordinate axes define the polyhedron of the LP relaxation, which is given by the inequalities without the integrality constraint. The goal of the optimization is move the black dotted line as far upward while still touching the polyhedron. The optimal solutions of the integer problem are the points (1,2) and (2,2) which both have an objective value of 2. The unique optimum of the relaxation is (1.8,2.8) with objective value of 2.8.  Note that if the solution of the relaxation is rounded, it is neither feasible nor optimal for the ILP.

==Mixed integer and zero-one linear programs==

Mixed integer linear programming (MILP) involves problems in which only some of the variables, x_i, are constrained to be integers.  Zero-one linear programming involves problems in which the variables are restricted to be either 0 or 1.  Note that any bounded integer variable can be expressed as a combination of binary variables.  For example, given an integer variable, 0\le x\le U, the variable can be expressed using \lfloor \log_2U\rfloor+1 binary variables:
:
x = x_1+2x_2+4x_3+\ldots+2^{\lfloor \log_2U\rfloor}x_{\lfloor \log_2U\rfloor+1}.

==Example problems that can be formulated as ILPs==
A large number of problems can be formulated as ILPs.  These include
*Travelling Salesman
*Vertex Cover
*Covering problems
*Boolean satisfiability
Note that since the decision version of integer linear programming is in NP (solutions can be verified in polynomial time) and there are NP-complete problems that can be polynomial reduced to ILPs, the decision version of integer linear programming is NP-complete.

==Applications==

There are two main reasons for using integer variables when modeling problems as a linear program:
#The integer variables represent quantities that can only be integer. For example, it is not possible to build 3.7 cars.
#The integer variables represent decisions and so should only take on the value 0 or 1 .
These considerations occur frequently in practice and so integer linear programming can be used in many applications areas, some of which are briefly described below.

===Production planning===
In agricultural production planning involves determining production yield   for several crops  that can share resources (e.g. Land, labor, capital seeds fertilizer, etc). A possible objective is to maximize the total production, without exceeding the available resources. In some cases, this can be expressed in terms of a linear program, but variables must be constrained to be integer.

===Scheduling===

These problems involve service and vehicle scheduling in transportation networks.  For example, a problem may involve assigning buses or subways to individual routes so that a timetable can be met, and also to equip them with drivers. Here binary decision variables indicate whether a bus or subway is assigned to a route and whether a driver is assigned to a particular train or subway.

===Telecommunications networks===

The goal of these problems is to design a network of lines to install so that a predefined set of communication requirements are met and the total cost of the network is minimal.  This requires optimizing both the topology of the network along with the setting the capacities of the various lines.  In many cases, the capacities are constrained to be integer quantities.  Usually there are, depending on the technology used, additional restrictions that can modeled as a linear inequalities with integer or binary variables.

===Cellular networks===
The task of frequency planning in GSM mobile networks involves distributing available frequencies across the antennas so that users can be served and interference is minimized between the antennas.  This problem can be formulated as an integer linear program in which binary variables indicate whether a frequency is assigned to an antenna.

==Algorithms==

The naive way to solve an ILP is to simply remove the constraint that x is integral, solve the corresponding LP (called the  LP relaxation of the ILP), and then round the entries of the solution to the LP relaxation.  But, not only may this solution not be optimal, it may not even be feasible.

===Using total unimodularity===

While in general the solution to LP relaxation will not be guaranteed to be optimal, if the ILP has the form \max\mathbf{c}^\mathrm{T} \mathbf{x} such that A\mathbf{x} = \mathbf{b} where A, \mathbf{b}, and \mathbf{c} have all integer entries and A is totally unimodular, then every basic feasible solution is integral.  Consequently, the solution returned by the simplex algorithm is guaranteed to be integral.  To show that every basic feasible solution is integral, let \mathbf{x} be an arbitrary basic feasible solution . Since \mathbf{x} is feasible,
we know that A\mathbf{x}=\mathbf{b}. Let \mathbf{x}_0=[x_{n_1},x_{n_2},\cdots,x_{n_j}] be the elements corresponding to the basis columns for the basic solution \mathbf{x}. By definition of a basis, there is some square submatrix B of
A with linearly independent columns such that B\mathbf{x}_0=\mathbf{b}.

Since the columns of B are linearly independent and B is square, B is nonsingular,
and therefore by assumption, B is unimodular and so \det(B)=\pm1. Also, since B is nonsingular, it is invertible and therefore \mathbf{x}_0=B^{-1}\mathbf{b}. By definition, B^{-1}=\frac{B^{adj}}{\det(B)}=\pm B^{adj}. Note that B^{adj} denotes the adjugate of B and is integral because B is integer.  Therefore,
:
\begin{align}
&\Rightarrow B^{-1}=\pm B^{adj} \text{ is integral.} \\
&\Rightarrow x_0=B^{-1}b \text{ is integral.} \\
&\Rightarrow \text{Every basic feasible solution is integral.}
\end{align}

Thus, if the matrix A of an ILP is totally unimodular, rather than use an ILP algorithm, the simplex method can be used to solve the LP relaxation and the solution will be integer.

===Exact algorithms===
When the matrix A is not totally unimodular, there are a variety of algorithms that can be used to solve integer linear programs exactly.  One class of algorithms are cutting plane methods which work by solving the LP relaxation and then adding linear constraints that drive the solution towards being
integer without excluding any integer feasible points.

Another class of algorithms are variants of the branch and bound method.  For example, the branch and cut method that combines both branch and bound and cutting plane methods.  Branch and bound algorithms have a number of advantages over algorithms that only use cutting planes.  One advantage is that the algorithms can be terminated early and as long as at least one integral solution has been found, a feasible, although not necessarily optimal , solution can be returned.  Further, the solutions of the LP relaxations can be used to provide a worst-case estimate of how far from optimality the returned solution is.  Finally, branch and bound methods can be used to return multiple optimal solutions.

===Heuristic methods===
Since integer linear programming is NP-complete, many problem instances are intractable and so heuristic methods must be used instead.  For example, tabu search can be used to search for solutions to ILPs.  To use tabu search to solve ILPs, moves can be defined as incrementing or decrementing an integer constrained variable of a feasible solution, while keeping all other integer-constrained variables constant.  The unrestricted variables are then solved for.  Short term memory can consist of previous tried solutions while medium term memory can consist of values for the integer constrained variables that have resulted in high objective values (assuming the ILP is a maximization problem).  Finally, long term memory can guide the search towards integer values that have not previously been tried.

Other heuristic methods that can applied to ILPs include
*Hill climbing
*Simulated annealing
*Reactive search optimization
*Ant colony optimization
*Hopfield neural networks

There are also a variety of other problem-specific heuristics, such as the k-opt heuristic for the travelling salesman problem.  Note that a disadvantage of heuristic methods is that if they fail to find a solution, it cannot be determined whether it is because there is no feasible solution or whether the algorithm simply was unable to find one.  Further, it is usually impossible to quantify how close to optimal a solution returned by these methods is.

==References==

==Further reading==
* 
* 
* 
* 
* 
* 
* 
*

==External links==
* A Tutorial on Integer Programming
* Conference Integer Programming and Combinatorial Optimization, IPCO
* The Aussois Combinatorial Optimization Workshop