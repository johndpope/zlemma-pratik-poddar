MATLAB (matrix laboratory) is a numerical computing environment and fourth-generation programming language. Developed by MathWorks, MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages, including C, C++, Java, and Fortran.

Although MATLAB is intended primarily for numerical computing, an optional toolbox uses the MuPAD symbolic engine, allowing access to symbolic computing capabilities. An additional package, Simulink, adds graphical multi-domain simulation and Model-Based Design for dynamic and embedded systems.

In 2004, MATLAB had around one million users across industry and academia. MATLAB users come from various backgrounds of engineering, science, and economics. MATLAB is widely used in academic and research institutions as well as industrial enterprises.

== History ==
Cleve Moler, the chairman of the computer science department at the University of New Mexico, started developing MATLAB in the late 1970s. He designed it to give his students access to LINPACK and EISPACK without them having to learn Fortran. It soon spread to other universities and found a strong audience within the applied mathematics community. Jack Little, an engineer, was exposed to it during a visit Moler made to Stanford University in 1983. Recognizing its commercial potential, he joined with Moler and Steve Bangert. They rewrote MATLAB in C and founded MathWorks in 1984 to continue its development. These rewritten libraries were known as JACKPAC. In 2000, MATLAB was rewritten to use a newer set of libraries for matrix manipulation, LAPACK.

MATLAB was first adopted by researchers and practitioners in control engineering, Little's specialty, but quickly spread to many other domains. It is now also used in education, in particular the teaching of linear algebra and numerical analysis, and is popular amongst scientists involved in image processing.

== Syntax ==
The MATLAB application is built around the MATLAB language, and most use of MATLAB involves typing MATLAB code into the Command Window (as an interactive mathematical shell), or executing text files containing MATLAB codes, including scripts and/or functions.

=== Variables ===
Variables are defined using the assignment operator, =. MATLAB is a weakly typed programming language because types are implicitly converted.  It is a dynamically typed language because variables can be assigned without declaring their type, except if they are to be treated as symbolic objects, and that their type can change. Values can come from constants, from computation involving values of other variables, or from the output of a function. For example:

>> x = 17
x =
 17
>> x = 'hat'
x =
hat
>> y = x + 0
y =
       104        97       116
>> x = pi/2
x =
   12.0000    1.5708
>> y = 3*sin(x)
y =
   -1.6097    3.0000

=== Vectors/matrices ===
A simple array is defined using the colon syntax: init:increment:terminator. For instance:

>> array = 1:2:9
array =
 1 3 5 7 9

defines a variable named array (or assigns a new value to an existing variable with the name array) which is an array consisting of the values 1, 3, 5, 7, and 9. That is, the array starts at 1 (the init value), increments with each step from the previous value by 2 (the increment value), and stops once it reaches (or to avoid exceeding) 9 (the terminator value).

>> array = 1:3:9
array =
 1 4 7

the increment value can actually be left out of this syntax (along with one of the colons), to use a default value of 1.

>> ari = 1:5
ari =
 1 2 3 4 5

assigns to the variable named ari an array with the values 1, 2, 3, 4, and 5, since the default value of 1 is used as the incrementer.

Indexing is one-based, which is the usual convention for matrices in mathematics, although not for some programming languages such as C, C++, and Java.

Matrices can be defined by separating the elements of a row with blank space or comma and using a semicolon to terminate each row. The list of elements should be surrounded by square brackets: []. Parentheses: () are used to access elements and subarrays (they are also used to denote a function argument list).

>> A = 3 2 13; 5 10 11 8; 9 6 7 12; 4 15 14 1
A =
 16  3  2 13
  5 10 11  8
  9  6  7 12
  4 15 14  1

>> A(2,3)
ans =
 11

Sets of indices can be specified by expressions such as "2:4", which evaluates to 3, 4.  For example, a submatrix taken from rows 2 through 4 and columns 3 through 4 can be written as:

>> A(2:4,3:4)
ans =
 11 8
 7 12
 14 1

A square identity matrix of size n can be generated using the function eye, and matrices of any size with zeros or ones can be generated with the functions zeros and ones, respectively.

>> eye(3)
ans =
 1 0 0
 0 1 0
 0 0 1
>> zeros(2,3)
ans =
 0 0 0
 0 0 0
>> ones(2,3)
ans =
 1 1 1
 1 1 1

Most MATLAB functions can accept matrices and will apply themselves to each element. For example, mod(2*J,n) will multiply every element in "J" by 2, and then reduce each element modulo "n". MATLAB does include standard "for" and "while" loops, but (as in other similar applications such as R), using the vectorized notation often produces code that is faster to execute. This code, excerpted from the function magic.m, creates a magic square M for odd values of n (MATLAB function meshgrid is used here to
generate square matrices I and J containing 1:n).

[J,I] = meshgrid(1:n);
A = mod(I + J - (n + 3) / 2, n);
B = mod(I + 2 * J - 2, n);
M = n * A + B + 1;

=== Structures ===
MATLAB has structure data types. Since all variables in MATLAB are arrays, a more adequate name is "structure array", where each element of the array has the same field names. In addition, MATLAB supports dynamic field names (field look-ups by name, field manipulations, etc.). Unfortunately, MATLAB JIT does not support MATLAB structures, therefore just a simple bundling of various variables into a structure will come at a cost.

=== Function handles ===
MATLAB supports elements of lambda calculus by introducing function handles, or function references, which are implemented either in .m files or anonymous/nested functions.

=== Classes ===
Although MATLAB has classes, the syntax and calling conventions are significantly different from other languages.
MATLAB has value classes and reference classes, depending on whether the class has handle as a super-class (for reference classes) or not (for value classes).

Method call behavior is different between value and reference classes. For example, a call to a method

object.method();

can alter any member of object only if object is an instance of a reference class.

== Graphics and graphical user interface programming ==
MATLAB supports developing applications with graphical user interface features. MATLAB includes GUIDE (GUI development environment) for graphically designing GUIs.
It also has tightly integrated graph-plotting features. For example the function plot can be used to produce a graph from two vectors x and y. The code:

x = 0:pi/100:2*pi;
y = sin(x);
plot(x,y)

produces the following figure of the sine function:

A MATLAB program can produce three-dimensional graphics using the functions surf, plot3 or mesh.
{|
|-
| valign="top" |[X,Y] = meshgrid(-10:0.25:10,-10:0.25:10);
f = sinc(sqrt((X/pi).^2+(Y/pi).^2));
mesh(X,Y,f);
axis(10 -10 10 -0.3 1)
xlabel('{\bfx}')
ylabel('{\bfy}')
zlabel('{\bfsinc} ({\bfR})')
hidden off

|    
| valign="top" |
[X,Y] = meshgrid(-10:0.25:10,-10:0.25:10);
f = sinc(sqrt((X/pi).^2+(Y/pi).^2));
surf(X,Y,f);
axis(10 -10 10 -0.3 1)
xlabel('{\bfx}')
ylabel('{\bfy}')
zlabel('{\bfsinc} ({\bfR})')

|-
| This code produces a wireframe 3D plot of the two-dimensional unnormalized sinc function:
|    
| This code produces a surface 3D plot of the two-dimensional unnormalized sinc function:
|-
| style="text-align:center;"|
|    
| style="text-align:center;"|
|}

In MATLAB, graphical user interfaces can be programed with the GUI design environment (GUIDE) tool.

== Object-oriented programming ==
MATLAB's support for object-oriented programming includes classes, inheritance, virtual dispatch, packages, pass-by-value semantics, and pass-by-reference semantics.

classdef hello
    methods
        function doit(this)
            disp('Hello!')
        end
    end
end

When put into a file named hello.m, this can be executed with the following commands:

>> x = hello;
>> x.doit;
Hello!

== Interfacing with other languages ==
MATLAB can call functions and subroutines written in the C programming language or Fortran. A wrapper function is created allowing MATLAB data types to be passed and returned. The dynamically loadable object files created by compiling such functions are termed "MEX-files" (for MATLAB executable).

Libraries written in Perl, Java, ActiveX or .NET can be directly called from MATLAB, and many MATLAB libraries (for example XML or SQL support) are implemented as wrappers around Java or ActiveX libraries. Calling MATLAB from Java is more complicated, but can be done with a MATLAB toolbox which is sold separately by MathWorks, or using an undocumented mechanism called JMI (Java-to-MATLAB  Interface), (which should not be confused with the unrelated Java Metadata Interface that is also called JMI).

As alternatives to the MuPAD based Symbolic Math Toolbox available from MathWorks, MATLAB can be connected to Maple or Mathematica.

Libraries also exist to import and export MathML.

== License ==
MATLAB is a proprietary product of MathWorks, so users are subject to vendor lock-in.  Although MATLAB Builder product can deploy MATLAB functions as library files which can be used with .NET or Java application building environment, future development will still be tied to the MATLAB language.

Each toolbox is purchased separately. If an evaluation license is requested, the MathWorks sales department requires detailed information about the project for which MATLAB is to be evaluated. Overall the process of acquiring a license is expensive in terms of money and time. If granted (which it often is), the evaluation license is valid for two to four weeks. A student version of MATLAB is also available.

It has been reported that EU competition regulators are investigating whether MathWorks refused to sell licenses to a competitor.

== Alternatives ==

MATLAB has a number of competitors. Commercial competitors include Mathematica, Maple, and IDL. There are also free open source alternatives to MATLAB, in particular GNU Octave, FreeMat, and Scilab which are intended to be mostly compatible with the MATLAB language. Among other languages that treat arrays as basic entities (array programming languages) are APL, Fortran 90 and higher, S-Lang, as well as the statistical languages R and S. There are also libraries to add similar functionality to existing languages, such as IT++ for C++, Perl Data Language for Perl, and SciPy for Python.

GNU Octave stands out as it treats incompatibility with MATLAB as a bug (see GNU Octave#Matlab), therefore it aims to provide a software clone.

== Release history ==

The number (or Release number) is the version reported by Concurrent License Manager program FlexLM.

== File extensions ==
=== MATLAB ===
; .fig : MATLAB figure
; .m : MATLAB code (function, script, or class)
; .mat : MATLAB data (binary file for storing variables)
; .mex... (.mexw32, .mexw64, .mexglx, ...) : MATLAB executable MEX-files (platform specific, e.g. ".mexmac" for the Mac, ".mexglx" for Linux, etc.)
; .p : MATLAB content-obscured .m file (P-code)
; .mlappinstall : MATLAB packaged App Installer

=== Simulink ===
; .mdl : Simulink Model
; .mdlp : Simulink Protected Model
; .slx : Simulink Model (SLX format)
; .slxp : Simulink Protected Model (SLX format)

=== Simscape ===
; .ssc : Simscape Model

=== MuPAD ===
; .mn : MuPAD Notebook
; .mu : MuPAD Code
; .xvc, .xvz : MuPAD Graphics

=== Third-party ===
; .jkt : GPU Cache file generated by Jacket for MATLAB (AccelerEyes)
; .mum : MATLAB CAPE-OPEN Unit Operation Model File (AmsterCHEM)

== Easter eggs ==
Several easter eggs exist in MATLAB. These include hidden pictures, and random inside jokes. For example, typing in "spy" will generate a picture of the spies from Spy vs Spy.  "Spy" was changed to an image of a dog in recent releases (R2011B). Typing in "why" randomly outputs a philosophical answer. Other commands include "penny", "toilet", "image", and "life".  Not every Easter egg appears in every version of MATLAB – some appear and some disappear.

== See also ==
* List of numerical analysis software
* Comparison of numerical analysis software

== Notes ==

== References ==

* 
* 
* 
*

== External links ==

* 
* MATLAB overview, at the MathWorks website
* Platform Road Map, at the MathWorks website.
* System Requirements, at the MathWorks website.
* MATLAB Central File Exchange – Library of over 18,000 user-contributed MATLAB files and toolboxes, mostly distributed under BSD License.
* 
* MATLAB Central Newsreader – a web-based newsgroups reader hosted by MathWorks for comp.soft-sys.matlab
* LiteratePrograms (MATLAB)
* MATLAB Central Blogs
* Physical Modeling in MATLAB by Allen B. Downey, Green Tea Press, PDF, ISBN 978-0-615-18550-7. An introduction to MATLAB.
* Writing Fast MATLAB Code by Pascal Getreuer
* Calling MATLAB from Java: MatlabControl JMI Wrapper, The MatlabJava Server, MatlabControl
* International Online Workshop on MATLAB and Simulink by WorldServe Education
* MATLAB tag on Stack Overflow.
* MATLAB Answers – a collaborative environment for finding the best answers to your questions about MATLAB, Simulink, and related products.
* Cody – a MATLAB Central game that challenges and expands your knowledge of MATLAB.
* MATLAB Online Programming Contest
* Trendy – a MATLAB based web service for tracking and plotting trends.